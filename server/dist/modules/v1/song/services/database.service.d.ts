import { SongCacheEntity } from 'src/database/entities/song/song.cache.entity';
import { SongEntity } from 'src/database/entities/song/song.entity';
import { SongMetadataEntity } from 'src/database/entities/song/song.metadata.entity';
import { Repository } from 'typeorm';
import { TSong } from '../types/song.types';
import { UserEntity } from 'src/database/entities/user/user.entity';
import { SongLikeEntity } from 'src/database/entities/song/song.like.entity';
import { ServerLogger } from 'src/server/server.logger';
export declare class SongDatabaseService {
    private songRepository;
    private songCacheRepository;
    private songMetadataRepository;
    private songLikeRepository;
    private logger;
    private SONG_FIELDS;
    private MAX_CACHE_SIZE;
    constructor(songRepository: Repository<SongEntity>, songCacheRepository: Repository<SongCacheEntity>, songMetadataRepository: Repository<SongMetadataEntity>, songLikeRepository: Repository<SongLikeEntity>, logger: ServerLogger);
    findBySongId(song_id: string, relations?: string[]): Promise<SongEntity>;
    likeToSong(user: UserEntity, song: SongEntity): Promise<boolean>;
    findRandomSongs(limit: number): Promise<SongEntity[]>;
    saveNewSong(song: TSong): Promise<SongEntity>;
    setSongCache(song: SongEntity, buffer: Buffer): Promise<void>;
    updateDownloadingStatus(song: SongEntity, is_downloading: boolean): Promise<void>;
    updateSongLastAccessed(song: SongEntity): Promise<void>;
    incListenCount(songId: string): Promise<void>;
    updateSongMetadata(song: SongEntity, metadata: SongMetadataEntity): Promise<void>;
    findMoreAuidionsSongs(limit: number): Promise<SongEntity[]>;
    findUserLikedSongs(user: UserEntity, limit: number): Promise<any[]>;
    findTopSongsByLike(limit: number): Promise<SongEntity[]>;
    checkLikedSong(user: UserEntity, song_id: string): Promise<boolean>;
    private cleanOldCachedSongs;
}
